package bitcoin.crypto.ecc;

import static bitcoin.util.BigInt.from;

import java.math.BigInteger;

public final class Secp256k1 {	
	// The prime order of the finite field ...
	public static final BigInteger P = 
			BigInteger.TWO.pow(256).subtract(BigInteger.TWO.pow(32)).subtract(from(977));
	
	// A and B represent the coefficients of the elliptic curve ...
	public static final Secp256k1Element A = new Secp256k1Element(BigInteger.ZERO);
	public static final Secp256k1Element B = new Secp256k1Element(from(7));
	
	// Gx and Gy are the coordinates of the generator point on the curve ...
	public static final Secp256k1Element Gx = new Secp256k1Element(
			new BigInteger("79be667ef9dcbbac55a06295ce870b07029bfcdb2dce28d959f2815b16f81798", 16));
	public static final Secp256k1Element Gy = new Secp256k1Element(
			new BigInteger("483ada7726a3c4655da4fbfc0e1108a8fd17b448a68554199c47d08ffb10d4b8", 16));
	
	// G represents the generator point ...
	public static final Secp256k1Point G = Secp256k1Point.fromCurve(Gx, Gy);
	
	// N is the order of the group generated by G ...
	public static final BigInteger N = 
			new BigInteger("fffffffffffffffffffffffffffffffebaaedce6af48a03bbfd25e8cd0364141", 16);
	
	private Secp256k1() {}
}
